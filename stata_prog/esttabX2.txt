// Author: Johannes F. Schmieder
// Department of Economics, Boston University
// cellgraph.ado
// Version 2018.9.18

// First Version: April 2008
// Comments and suggestions welcome: johannes{at}bu.edu

// Notes:
// Routine to generate variably by variable graph (similar to tabstat but as graph)

// Usage:
// cellgraph graphvars, by(byvar1 byvar2) [options]

// Data is collapsed to cell level, where cells are defined by one or two categorical variables (byvar1 and byvar2)
// and cell means (or other statistics) of a third variable (graphvar) are graphed. If more than one graphvar is specified,
// then each graphvar is plotted.
//
// Options:
// colors(color1 color2 ...) : provide a list of colors to replace standard palette
// name(graphname) : provide a graph name (just like the name option in other graph commands)
// stat(statistics) : the cell statistic to be used if not specified "mean" is assumed,
// other possibilities: min max and sum, ...
// it is also possible to show more than one stat
// noci : don't display confidence intervals
// nonotes : don't display any notes in legend
// nodate: don't display date in notes
// *: provide any twoway options to pass through to the call of the twoway command
//   see the example for why this might be useful. Can also used to overwrite options that are given as standard,
//   for example title(My Title) would overwrite the standard title with "My Title"


// Example:
/*
sysuse nlsw88
cellgraph wage, by(grade)
cellgraph wage, by(grade union)
cellgraph wage, by(grade union)  stat(max)
cellgraph wage if industry>2 & industry<10, by(grade industry) nonotes noci legend(col(2))
cellgraph wage, by(grade) stat(p25 p50 p90)
cellgraph wage, by(grade) stat(sd iqr)
cellgraph_test wage married, by(grade)
cellgraph wage married, by(grade) stat(sd iqr)

*/


version 14.1
capture program drop cellgraph_test
program define cellgraph_test
	syntax varlist [if] [in] [pweight iweight aweight fweight] , by(str) ///
	[Colors(str) Name(str) Title(str) SUBTitle(passthru) Stat(str) ///
	NOCI NONOTES NODATE  MSYmbol(passthru) LIst SAMPLENotes(str) bin(integer 0) ///
	scatter lfit  binscatter(integer 0) gtools ftools vce(str) cenci(str) mlabel reg(str) export(str) xsize(str) * ]

	local colors `colors' ///
		dknavy  cranberry dkgreen edkblue ///
		dkorange maroon olive 	eltblue ///
		eltgreen emidblue erose blue ///
		purple brown cyan  ebblue ///
		emerald orange forest_green gold  ///
		green khaki lavender lime ///
		ltblue ltbluishgray ltkhaki  ///
		midblue midgreen mint navy  olive_teal magenta ///
			orange orange_red pink red sand sandb sienna stone teal yellow


	marksample touse

	if "`msymbol'"=="" local msymbol msymbol("O")

	local wc : word count `by'
	if `wc'>2 {
		disp "Specify maximum 2 by variables"
		error 198
	}
	else if `wc'==2 {
		tokenize `by'
		confirm variable `1'
		confirm variable `2'
		qui tab `2' if `touse' & `2'<.
		local N_unique = r(r)
		cap assert r(r) <= 60
		if _rc {
			disp in red "Second By-Variable may only take 60 or less distinct values"
			error 198
		}
	}
	else {
		confirm variable `by'
	}

	if "`stat'"=="" local stat mean
	if "`stat'"!="mean" local noci noci
	local sc : word count `stat'
	if `sc'>1 local noci noci

	if `sc'>1 & `wc'>1 {
		di in red "You can either specify more than 1 'by' variable or more than one statistic, but not both"
		error 198
	}

	local figtitle `"`title'"'

	local vc : word count `varlist'
	local i 1
	foreach v in `varlist' {
		local varlabel : variable label `v'
		if `"`varlabel'"'==`""' local varlabel `"`v'"'
		local title`i++' `"`varlabel'"'
	}
	if "`title'"=="" local title `varlist'
	if "`name'"!="" local nameopt name(`name')
	
	
	preserve
	
	//Allows to control for observations (do this regression based) 
	
	if "`reg'"!=""{
				cap drop _I_month
				qui tab month if `touse', gen(_I_month)
				
				cap drop _I_weekdate2
				qui tab weekdate2 if `touse', gen(_I_weekdate2)
				
		foreach x of varlist _I_month* _I_weekdate2* {
			

				cap	drop help`x'	
				egen help`x' = mean(`x') if e(sample) == 1 
				replace `x' = `x' - help`x'
				sum `x'
				
				assert inrange(r(mean),-0.001,0.001)
				drop help`x'

			
		}
		
		foreach	xzv of varlist `varlist'{
			
			if "`reg'"=="ols" reg `xzv' if `touse' 
			else if "`reg'"=="fe"{
				

				areg `xzv' _I_month* _I_weekdate2* if `touse', absorb(bak_id)
				
			}
		}
	
	}
	
	qui keep if `touse'
	if `wc'==1 & `vc'==1 {
		qui count if `varlist'!=. & `by' !=. & `touse'
		local N = r(N)
		local cattit : variable label `by'
		if "`cattit'"=="" local cattit `by'
	}

	local clist
	foreach v in `varlist' {
		local clist `clist' (count) obs`v'=`v' (sd) sd`v'=`v'
		foreach s in `stat' {
			if "`s'"!="var"	local clist `clist' (`s') `v'_`s'=`v'
			else {
				local clist `clist' (sd) `v'_`s'=`v'
			}
		}
	}

	if `bin'!=0 & `binscatter'!=0 {
		di in red "Options 'bin' and 'binscatter'"
		error 184 // cannot be combined
	}
	if `wc'==1  & `bin'!=0 {
		replace `by' = `by'-mod(`by',`bin')+`bin'*0.5
	}
	if `wc'==2  & `bin'!=0 {
		local first_by_var : word 1 of `by'
		replace `first_by_var' = `first_by_var'-mod(`first_by_var',`bin')+`bin'*0.5
	}
	if `binscatter'!=0 {
		local first_by_var : word 1 of `by'
		tempvar miss dum binned
		g `miss' = missing(`first_by_var')
		bys `miss' (`first_by_var'): gen `dum' = int(`binscatter'*(_n-1)/_N)+1
		egen `binned' = mean(`first_by_var'), by(`dum')
		qui replace `first_by_var' = `binned'
	}

	//if mlabel() specified, generate A variable containing the group-wise number of observations:
	
	if "`mlabel'"!=""{	
		
		tempvar N
		gen `N' = 1
		local addN (sum) `N' 
		local mlabel mlabel(`N') mlabcolor(black) mlabsize(vsmall) mlabposition(1)
	}
	
	if "`gtools'"=="gtools" gcollapse  `clist' `addN' if `touse' [`weight' `exp'], by(`by') fast
	else if "`ftools'"=="ftools" fcollapse  `clist' `addN' if `touse' [`weight' `exp'], by(`by') fast
	else if "`vce'"=="" qui collapse  `clist' `addN' if `touse' [`weight' `exp'], by(`by') fast	
	else if "`vce'"!="" {
					di "test"
		
		// Procedure, if non-standard standard errors needed (indicated by vce-option)
		mean `varlist' if `touse' [`weight' `exp'], over(`by' , nolabel) vce(`vce')
					di "test2"
	
		foreach v of local varlist{ 
		
			cap drop `v'_mean `v'hi `v'lo
			gen `v'_mean = .
			gen `v'hi = .
			gen `v'lo = .
		
			local zz "`e(over_labels)'"
			local byvar `e(over)'
			gettoken byvar1 byvar2:byvar	

			matrix b = e(b)
			matrix V = e(V)

			local rv = 0 // Running Variable
		

			if "`byvar2'" != ""{
				 foreach x of local zz{
							
									local rv = `rv'+1
									
									gettoken x1 x2:x	
									di "`x'"

									di `x1'
									di `x2'
									replace `v'_mean = b[1,`rv'] if `byvar1' == `x1'&`byvar2' == `x2'
									replace `v'lo = b[1,`rv'] - 1.96*sqrt(V[`rv',`rv']) if `byvar1' == `x1'&`byvar2' == `x2'&!missing(V[`rv',`rv'])
									replace `v'hi = b[1,`rv'] + 1.96*sqrt(V[`rv',`rv']) if `byvar1' == `x1'&`byvar2' == `x2'&!missing(V[`rv',`rv'])

				}
			}

			else {

				foreach x of local zz{
					local rv = `rv'+1
					di "test"
					replace `v'_mean = b[1,`rv'] if `byvar1' == `x'
					replace `v'lo = b[1,`rv'] - 1.96*sqrt(V[`rv',`rv']) if `byvar1' == `x'
					replace `v'hi = b[1,`rv'] + 1.96*sqrt(V[`rv',`rv']) if `byvar1' == `x'

				}
			}
			di "qui collapse  `varlist'* `addN' if `touse' [`weight' `exp'], by(`by') fast"
			collapse  `varlist'* `addN' if `touse' [`weight' `exp'], by(`by') fast
			
		}
	
	}

	
	
	if "`vce'"==""{
		foreach s in `stat' {
				local j 1
				foreach v in `varlist' {
					if "`s'"=="var"	{
						replace `v'_`s' = `v'_`s'^2
						label var `v'_`s' "Variance of `title`j++''"
					}
					
					if "`s'"=="mean"&"`vce'"=="" {
					
						g `v'hi = `v'_mean + 1.96*sd`v'/sqrt(obs`v')
						g `v'lo = `v'_mean - 1.96*sd`v'/sqrt(obs`v')
						label var `v'_`s' "`title`j++''"
					}
					else {
						__statlabel `s'
						label var `v'_`s' "`__statlabel' of `title`j++''"
						// label var `v'_`s' "`title`j++''"
					}
				}
		}
		
		
		foreach v in `varlist' {
			label var obs`v' "No. Observations"
		}
	}
	
	local graphcmd connected
	if "`scatter'"!="" local graphcmd scatter

	if `wc'==1 {
		local notes ""Number of observations: `N'" "
		if  "`stat'"=="mean" & "`noci'"=="" {
			local i 1
			foreach v in `varlist' {
				gettoken col colors:colors
				local graphs 	`graphs'	(`graphcmd' `v'hi `by', lpattern("#") color(`col') msymbol(none) )  ///
					(`graphcmd' `v'lo `by' , lpattern("#") color(`col') msymbol(none) )
				if "`lfit'"=="lfit" {
					local graphs 	`graphs'	(lfit `v'_mean `by' , lpattern("shortdash") color(`col'))
				}
				local graphs `graphs' (`graphcmd' `v'_mean `by' , lpattern("#") `msymbol' color(`col') `mlabel')

				if "`lfit'"=="lfit" local order `order' `=`i'*4'
				else local order `order' `=`i++'*3'
			}
		}
		if  "`stat'"!="mean" | "`noci'"!="" {
			local i 1
			foreach s in `stat' {
				foreach v in `varlist' {
					gettoken col colors:colors
					if "`lfit'"=="lfit" {
						local graphs 	`graphs'	(lfit `v'_mean `by' , lpattern("shortdash") color(`col') )
					}

					local graphs `graphs' (`graphcmd' `v'_`s' `by' , lpattern("#") `msymbol' color(`col') )
					// local statlabel : variable label `v'_`s'
					// local legendlabel `legendlabel' label(`i' "`s'")
					if "`lfit'"=="lfit" local order `order' `=`i'*2'
					else local order `order' `=`i++'*1'
				}
			}
		}
	}
// di `"`order'"'
	


	if `wc'==2 { // go over categories of second by variable
		foreach v in `varlist' {
		
			if "`cenci'"!=""{ // S.T. Option for censoring ci at specific levels (can avoid "too large" scaling if ci large)
			
				gettoken cenlo cenhi:cenci		
				assert !missing(`cenlo',`cenhi')
				
				replace `v'lo = . if `v'lo<`cenlo'|`v'lo==`v'_mean
				replace `v'hi = . if `v'hi>`cenhi'|`v'hi==`v'_mean
			
			}
		
		
			local cattit : variable label `1'
			if "`cattit'"=="" local cattit `1'
			// Count observations in by groups:
			tempvar N
			g `N' = .
			if "`vce'" == "" bys `2' `1': replace `N' = sum(obs`v')

			qui tab `2', gen(__dby2_)
			forvalues i =1/`N_unique' {

				local catlabel : variable label __dby2_`i'
				local catlabel = subinstr("`catlabel'","`2'==","",.)
				qui sum `N' if __dby2_`i'==1
				local max = r(max)
				local notes "`notes' "Number of obs, `catlabel':    `max'""

				gettoken col colors:colors

				if "`noci'"!="" {
					if "`lfit'"=="lfit" {
						local graphs 	`graphs'	(lfit `v'_`stat'   `1' if __dby2_`i'==1, lpattern("shortdash") color(`col') )
					}
					local graphs `graphs' ///
						(`graphcmd' `v'_`stat'   `1' if __dby2_`i'==1 ,  lpattern("#") `msymbol' color(`col') `mlabel')

					if "`lfit'"=="lfit" {
						local legendlabel `legendlabel' label(`=`i'*2' "`catlabel'")
						local order `order' `=`i'*2'
					}
					else {
						local order `order' `i'
						local legendlabel `legendlabel' label(`i' "`catlabel'")
					}
				}
				else {
					local graphs `graphs' ///
						(`graphcmd' `v'hi `1' if __dby2_`i'==1  , lpattern("#") color(`col'*.6) msymbol(none) )  ///
						(`graphcmd' `v'lo `1' if __dby2_`i'==1  , lpattern("#") color(`col'*.6) msymbol(none) )  ///
						(`graphcmd' `v'_`stat'  `1' if __dby2_`i'==1 , lpattern("#") `msymbol' color(`col') `mlabel')
					local legendlabel `legendlabel' label(`=`i'*3' "`catlabel'")
					local order `order' `=`i'*3'
				}
			}
		}
	}

	// local N_legend_items: word count `order'
	// if `N_legend_items' > 1 local legcol legend(col(2))

	if "`noci'"=="" local notes "`notes' "Bands are 95% confidence intervals""
	if "`nodate'"=="" local notes "`notes' "`c(current_date)' at `c(current_time)'" "
	if "`samplenotes'"!=""  local notes "`notes' "`samplenotes'" "
	if "`nonotes'"=="nonotes" local notes
// 	if "`legendlabel'"!="" local legendlabel legend(`legendlabel')

	sort `by'
	if `"`figtitle'"'==`""' {
		if `sc'==1 {
			local figtitle `"`=proper("`stat'")' `title' by `cattit'"'
		}
		else {
			local figtitle `"`title' by `cattit'"'
		}
	}
	twoway  ///
		`graphs' ///
		, scheme(solsim4) ///
		title(`"`figtitle'"', margin(small) size(small) ) /// box bexpand
		`subtitle' ///
		legend(order(`order') col(1) ring(1) region(color(none) margin(zero)) ///
			size(vsmall) symysize(*.5) symxsize(*1.2) ///
		 `legendlabel') ///
		legend(note(`notes' , ///
				size(vsmall) pos(4) ring(1) justification(right) xoffset(20))) ///
		xtitle(`"`cattit'"', size(small)) xlabel(`xla', labsize(small)) ylabel(,labsize(small)) ///
		ysize(7.5) xsize(10) graphr(color(white)) `nameopt' `options'  

	if "`export'"!="" {
		list `by' *`v'*  , clean noo div //  sum(obs`v') noo div
		save `export', replace
	}
	if "`list'"!="" {
		list `by' *`v'*  , clean noo div //  sum(obs`v') noo div
		save ./export_cellgraph.dta, replace
	}
	
	restore

end


cap program drop __statlabel
program define __statlabel
	local stat `0'
	if "`stat'"=="sd"  local __statlabel "SD"
	if "`stat'"=="iqr" local __statlabel "Interquartile Range"
	if "`stat'"=="median" local __statlabel "Median"
	if "`stat'"=="count" local __statlabel "Count"
	if "`stat'"=="mean" local __statlabel "Mean"

	forval i = 1/99 {
		if "`stat'"=="p`i'" {
			if mod(`i',10)==1 local pfx st
			else if mod(`i',10)==2 local pfx nd
			else if mod(`i',10)==3 local pfx rd
			else local pfx th
			if inlist(`i',11,12,13) local pfx th
			local __statlabel "`i'`pfx' Percentile"
		}
	}

	if "`__statlabel'"=="" local __statlabel "`stat'"
	c_local __statlabel `"`__statlabel'"'
end // __statlabel
